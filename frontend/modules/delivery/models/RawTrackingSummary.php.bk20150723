<?php
class RawTrackingSummary{

    protected $table      = 'trackings_summary';
    protected $tableMySQL = 'tracking_summary';
    protected $connection = 'mongodb';
    public $timestamps    = false;


    public function addSummary($metric, $websiteID, $adZoneID, $adformatID, $flightID, $flightWebsiteID, $adID, $campaignID){

        //make index attribute to group data summary by flight website
        $index = date('YmdH_') . $flightWebsiteID; // index theo flight website và theo từng giờ
        $info = [
            '_id'                  => $index,
            'created_d'            => date('Y-m-d'),
            'created_h'            => date('Y-m-d H'),
            'f'                    => intval($flightID),
            'fw'                   => intval($flightWebsiteID),
            'w'                    => intval($websiteID),
            'az'                   => intval($adZoneID),
            'a'                    => intval($adID),
            'camp'                 => intval($campaignID),
            'af'                   => intval($adformatID),
            // 'impression'        => 500, //impression
            // 'unique_impression' => 100, // unique impression
            // 'click'             => 300, // click
            // 'unique_click'      => 100, // unique click
            // 'ads_request'       => 1000 // ads request
            // .. etc
        ];

        $where = [
            '_id'   =>  $index
        ];
    	return $this->incrementUpsert($metric, 1, $where, $info);
    }

    public function addSummaryRequestEmptyAd($adZoneID, $adformatID, $websiteID){

        $metric = "ads_request";

        $indexKey = implode('_', [$adZoneID, $adformatID, $websiteID]);
        
        $index  = date('Ymdh_') . "noads_" . $indexKey; // index theo ad zone, website và adformat và theo từng giờ
        $info = [
            '_id'       => $index,
            'created_d' => date('Y-m-d'),
            'created_h' => date('Y-m-d H'),
            'az'        => intval($adZoneID),
            'af'        => intval($adformatID),
            'w'         => intval($websiteID),
            // 'ar'     => 1000 // ads request
        ];

        $where = [
            '_id'   =>  $index
        ];

        return $this->incrementUpsert($metric, 1, $where, $info);
    }


    /**
     * increment record's column value if exists or insert new record.
     *
     * @param  array  $values
     * @param  array  $options
     * @return int
     */
    public function incrementUpsert($column, $amount = 1, array $where = array(), array $extra = array())
    {   
        $db = DB::connection('mongodb')->collection($this->table);
        $query = array('$inc' => array($column => $amount));

        if ( ! empty($extra))
        {
            $query['$set'] = $extra;
        }
       
        // Protect
        $db->where(function($query) use ($column)
        {
            $query->where($column, 'exists', false);

            $query->orWhereNotNull($column);
        });

        if( ! empty($where))
        {
            $db->where($where);
        }

        return $db->update($query, array('upsert' => true, 'multiple' => 0));

    }
    /**
     * Decrement a column's value by a given amount.
     *
     * @param  string  $column
     * @param  int     $amount
     * @param  array   $extra
     * @return int
     */
    public function decrementUpsert($column, $amount = 1, array $extra = array())
    {
        return $this->incrementUpsert($column, -1 * $amount, $extra);
    }


    public function getRecentHourData($timestamp = ''){
        $dateH = !empty($timestamp) ? date('Y-m-d H', $timestamp) : date('Y-m-d H');
        return DB::connection('mongodb')->collection($this->table)->where('created_h', $dateH)->get();
    }

    public function getSummaryDayData($timestamp = ''){
        $date = !empty($timestamp) ? date('Y-m-d', $timestamp) : date('Y-m-d');
        return DB::connection('mongodb')->collection($this->table)->where('created_d', $date)->get();
    }


    public function reportScheduleHourly(){
        set_time_limit(0);
        $recordUpdated = 0;
        $cacheKey      = "Report:Schedule:Hourly";
        if(RedisHelper::get($cacheKey)){
            return false;
        }
        RedisHelper::set($cacheKey, 1, 5);
        // begin summary data
        //current hour
        $data = (new RawTrackingSummary())->getRecentHourData();
        if(intval(date('i')) < 10){
            $data = (new RawTrackingSummary())->getRecentHourData(strtotime("-1 hour"));
        }

        $recordUpdated = $this->generateSummaryData($data);
        return $recordUpdated;
        
    }

    public function reportScheduleDaily($time = ''){
        //run at 2.00 AM
        set_time_limit(0);
        $recordUpdated = 0;
        $cacheKey      = "Report:Schedule:Daily";
        if(RedisHelper::get($cacheKey)){
            return false;
        }
        RedisHelper::set($cacheKey, 1, 2);
        // begin summary data of yesterday
        $time = !empty($time) ? $time : strtotime("-1 day");
        $data = (new RawTrackingSummary())->getSummaryDayData($time);
        $recordUpdated = $this->generateSummaryData($data);

        return $recordUpdated;
    }

    public function generateSummaryData($rawSummaryData){
        $recordUpdated = 0;
        if(empty($rawSummaryData)){
            return $recordUpdated;
        }

        foreach ($rawSummaryData as $row) {
            $dataUpdate = [];
            $where = [
                'website_id'           =>   $row['w'],
                'publisher_ad_zone_id' =>   $row['az'],
                'ad_format_id'         =>   $row['af'],
                'hour'                 =>   intval(substr($row['created_h'], -2)),
                'date'                 =>   $row['created_d']
            ];

            if(strpos($row['_id'], 'noads') === FALSE){
                //summary of tracking success
                $where['flight_id']         = $row['f'];
                $where['flight_website_id'] = $row['fw'];
                $where['campaign_id']       = $row['camp'];
                $where['ad_id']             = $row['a'];
                $flight_website = FlightWebsiteBaseModel::find($row['fw']);
                if($flight_website){
                    $where['publisher_base_cost']  = $flight_website->publisher_base_cost;
                }
            }
            else{
                //summary ads request of adzone and adformat when no ads deliveried
                $where['flight_website_id'] = 0;
            }

            //list metrics to repport
            $metrics = [
                //general metrics
                'impression','unique_impression','click','unique_click','ads_request','conversion',
                //TVC metrics
                'start','firstquartile','midpoint','thirdquartile','complete','pause','unpause','mute','unmute','fullscreen',
            ];

            $checkExists = DB::table($this->tableMySQL)->select('id')->where($where)->first();
     
            foreach ($metrics as $metric) {
                if(!empty($row[$metric])){
                    $dataUpdate[$metric] = $row[$metric];
                }
            }

            if($checkExists){
                DB::table($this->tableMySQL)->where('id', $checkExists->id)->update($dataUpdate);
            }
            else{
                $dataUpdate = array_merge($dataUpdate, $where);
                DB::table($this->tableMySQL)->insert($dataUpdate);   
            }
            // pr($dataUpdate);

            $recordUpdated++;
        }

        return $recordUpdated;
    }
}
